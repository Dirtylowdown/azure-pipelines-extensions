pool:
  name: Azure Pipelines
  vmImage: windows-latest

trigger: none

steps:
- powershell: |
   function IsExempted
   {
       param(
           [string] $fileName
       )
   
       $exceptions = @("*.gif", "*.svg", "*.png", "*.dll", 
   "*\extensions\artifactengine\providers\typed-rest-client\httpclient.ts", "*\extensions\artifactengine\providers\typed-rest-client\util.ts",
   "*\extensions\bitbucket\src\tasks\downloadartifactsbitbucket\downloadbitbucket.js",
   "*\extensions\externaltfs\src\tasks\downloadartifactstfsgit\downloadtfgit.js")
       @($exceptions | ? { $fileName -ilike $_ }).Count -gt 0
   }
   
   Write-Host "Ensure there are no dev.azure.com and url.parse strings in the code."
   @("$(Build.Repository.LocalPath)\Extensions", "$(Build.Repository.LocalPath)\ServerTaskHelper", "$(Build.Repository.LocalPath)\TaskModules") | % { 
       dir $_ -rec | % {
           if ($_.Attributes -eq "Directory") {
               return
           }
   
           $lowerCaseFullPath = $_.FullName.ToLower()
           if(IsExempted $lowerCaseFullPath)
           {
               return
           }
           Write-Host $lowerCaseFullPath
   
           $text = Get-Content $lowerCaseFullPath | Out-String
           $match = ($text | Select-String -Pattern "\s*dev\.azure\.com*").Matches
           if($match.Count -gt 0)
           {
               Write-Error "Found dev.azure.com in $lowerCaseFullPath. You should not be hard coding dev.azure.com in the code."
           }
   
           $match = ($text | Select-String -Pattern "\s*url\.parse*").Matches
           if($match.Count -gt 0)
           {
               Write-Error "Found url.parse in $lowerCaseFullPath. You should not be using url.parse in the code."
           }
       }
   }
  errorActionPreference: continue
  failOnStderr: true
  displayName: 'Code Checks'

- task: NodeTool@0
  displayName: 'Use Node 10.24.1'
  inputs:
    versionSpec: 10.24.1

- powershell: 'node getUpdatedPaths.js'
  displayName: 'PowerShell Script'

- task: Npm@1
  displayName: 'npm install'
  inputs:
    verbose: false

- task: gulp@0
  displayName: 'gulp build'
  inputs:
    targets: build

- task: gulp@0
  displayName: 'gulp test'
  inputs:
    targets: test
    arguments: '--suite=ArtifactEngine'
  condition: or(contains(variables['UPDATEDAREAPATHS'], 'ArtifactEngine'),contains(variables['UPDATEDAREAPATHS'], 'package.json'))

# sign task with esrp (for now, only signs ExternalTfs) - start

- task: PowerShell@2
  displayName: 'PowerShell Script'
  inputs:
    targetType: filePath
    filePath: '$(Build.SourcesDirectory)\ci\sign-util.ps1'
    arguments: '-action prepare -rootFolder $(Build.SourcesDirectory)'

- task: PublishBuildArtifacts@1
  displayName: Publish artifacts
  inputs:
    pathToPublish: _signing
    artifactName: beforeSign

- template: sign-all-tasks.yml
  parameters:
    layoutRoot: $(Build.SourcesDirectory)\_signing

- task: PublishBuildArtifacts@1
  displayName: Publish artifacts
  inputs:
    pathToPublish: _signing
    artifactName: afterSign

- task: PowerShell@2
  displayName: 'PowerShell Script'
  inputs:
    targetType: filePath
    filePath: '$(Build.SourcesDirectory)\ci\sign-util.ps1'
    arguments: '-action finish -rootFolder $(Build.SourcesDirectory)'

# sign task with esrp (for now, only signs ExternalTfs) - end

- task: gulp@0
  displayName: 'gulp package'
  inputs:
    targets: package

- task: PublishBuildArtifacts@1
  displayName: Publish artifacts
  inputs:
    pathToPublish: _package
    artifactName: package